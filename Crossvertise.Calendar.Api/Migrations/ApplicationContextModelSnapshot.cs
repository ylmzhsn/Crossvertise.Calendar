// <auto-generated />
using System;
using Crossvertise.Calender.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crossvertise.Calendar.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 501, DateTimeKind.Local).AddTicks(572),
                            Date = new DateTime(2022, 1, 30, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Project Meeting",
                            OrganizerId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 501, DateTimeKind.Local).AddTicks(1684),
                            Date = new DateTime(2022, 1, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lunch with John",
                            OrganizerId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 501, DateTimeKind.Local).AddTicks(1693),
                            Date = new DateTime(2022, 2, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team Meeting",
                            OrganizerId = 2L
                        });
                });

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 495, DateTimeKind.Local).AddTicks(281),
                            UserName = "Max Mustermann"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 499, DateTimeKind.Local).AddTicks(3524),
                            UserName = "John Smith"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 499, DateTimeKind.Local).AddTicks(3548),
                            UserName = "Robert Turner"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 499, DateTimeKind.Local).AddTicks(3550),
                            UserName = "Erika Gobler"
                        });
                });

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.UserAppointment", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("UserAppointment");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            AppointmentId = 1L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(2951),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 2L,
                            AppointmentId = 1L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3522),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 3L,
                            AppointmentId = 1L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3526),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 4L,
                            AppointmentId = 1L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3527),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 1L,
                            AppointmentId = 2L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3529),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 2L,
                            AppointmentId = 2L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3530),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 1L,
                            AppointmentId = 3L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3531),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 2L,
                            AppointmentId = 3L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3532),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 3L,
                            AppointmentId = 3L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3534),
                            Id = 0L
                        },
                        new
                        {
                            UserId = 4L,
                            AppointmentId = 3L,
                            CreatedAt = new DateTime(2022, 1, 31, 6, 25, 24, 504, DateTimeKind.Local).AddTicks(3535),
                            Id = 0L
                        });
                });

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.Appointment", b =>
                {
                    b.HasOne("Crossvertise.Calender.Data.Entities.User", "Organizer")
                        .WithMany("OrganizedAppointments")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.UserAppointment", b =>
                {
                    b.HasOne("Crossvertise.Calender.Data.Entities.Appointment", "Appointment")
                        .WithMany("UserAppointment")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_UserAppointment_Appointments_AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crossvertise.Calender.Data.Entities.User", "User")
                        .WithMany("UserAppointment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAppointment_Users_UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.Appointment", b =>
                {
                    b.Navigation("UserAppointment");
                });

            modelBuilder.Entity("Crossvertise.Calender.Data.Entities.User", b =>
                {
                    b.Navigation("OrganizedAppointments");

                    b.Navigation("UserAppointment");
                });
#pragma warning restore 612, 618
        }
    }
}
